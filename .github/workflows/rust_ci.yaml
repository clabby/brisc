name: Rust CI
on:
  push:
    branches: [main]
  merge_group:
  pull_request:
env:
  CARGO_TERM_COLOR: always
jobs:
  cargo-tests:
    runs-on: ubuntu-latest
    name: Tests (feature powerset)
    timeout-minutes: 20
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - uses: taiki-e/install-action@just
      - uses: taiki-e/install-action@nextest
      - uses: taiki-e/install-action@cargo-hack
      - name: cargo test
        run: just hack nextest run --workspace --locked --no-tests warn

  cargo-build:
    runs-on: ubuntu-latest
    name: Build (feature powerset)
    timeout-minutes: 20
    continue-on-error: true
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - uses: taiki-e/install-action@just
      - uses: taiki-e/install-action@cargo-hack
      - name: build
        run: just hack build --workspace --locked

  cargo-check:
    runs-on: ubuntu-latest
    name: Check (feature powerset)
    timeout-minutes: 20
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
      - uses: taiki-e/install-action@just
      - uses: taiki-e/install-action@cargo-hack
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: cargo hack check
        run: just hack check

  cargo-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    name: Clippy
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: taiki-e/install-action@just
      - name: Install Rust nightly toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt, clippy
      - uses: taiki-e/install-action@cargo-hack
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: fmt + lint
        run: just hack clippy --workspace --all-targets -- -D warnings

  cargo-doc:
    runs-on: ubuntu-latest
    name: Rustdoc (lint + test)
    timeout-minutes: 20
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: true
      - uses: taiki-e/install-action@just
      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: doclint
        run: just lint-docs
      - name: doctest
        run: just test-docs

  cargo-build-benches:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    name: Build Benchmarks
    continue-on-error: true
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: taiki-e/install-action@just
      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - name: build benches
        run: cargo bench --no-run --workspace --all

  coverage:
    runs-on: ubuntu-latest
    name: codecov
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - uses: taiki-e/install-action@cargo-llvm-cov
      - uses: taiki-e/install-action@nextest
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: cargo llvm-cov
        run: |
          cargo llvm-cov nextest \
            --locked \
            --workspace \
            --lcov \
            --output-path lcov.info \
            --profile ci \
            && \
            mv ./target/nextest/ci/junit.xml ./junit.xml
      - name: Record Rust version
        run: echo "RUST=$(rustc --version)" >> "$GITHUB_ENV"
      - name: Upload coverage to codecov.io
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          env_vars: OS,RUST
          files: lcov.info
      - name: Upload test results to codecov.io
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
